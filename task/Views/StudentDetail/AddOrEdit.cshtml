@using task.Models
@model task.Models.Student

@{
    ViewData["Title"] = "AddorEdit";
    //Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container p-3 my-3 border">
    <h1> @ViewBag.PageName</h1>

    <div class="row">
        <div class="col-sm-6">
            <hr />
            <form asp-action="AddOrEdit">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                @if (@ViewBag.IsEdit)
                {
                    <input type="hidden" asp-for="StudentId" />
                    @*<input type="hidden" asp-for="GradeId" />
                    <input type="hidden" asp-for="SubjectId" />*@
                }
                <div class="form-group">
                    <label asp-for="FirstName" class="control-label"></label>
                    <input asp-for="FirstName" class="form-control" />
                    <span asp-validation-for="FirstName" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="LastName" class="control-label"></label>
                    <input asp-for="LastName" class="form-control" />
                    <span asp-validation-for="LastName" class="text-danger"></span>
                </div>
                @*<div class="form-group">
            @Html.LabelFor(x => Model.Selectedgrade, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-5">
                @Html.DropDownListFor(x => Model.Selectedgrade, new SelectList(Model.GradeNames, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "Grade" })
                @Html.ValidationMessageFor(x => x.Selectedgrade, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(x => Model.Selectedsubject, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-5">
                @Html.DropDownListFor(x => Model.Selectedsubject, new SelectList(Model.SubjectNames, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "Subjects" })
                @Html.ValidationMessageFor(x => x.Selectedsubject, "", new { @class = "text-danger" })
            </div>
        </div>*@
            <div class="form-group">
                <label asp-for="GradeNames" class="control-label"></label>

                <select asp-for="GradeId" class="form-control" asp-items="@ViewBag.GradeID">
                    <option value="">-- Select Grade --</option>
                </select>
   


      

       
                <span asp-validation-for="GradeId" class="text-danger" />

  

            </div>
            <div class="form-group">

                <label asp-for="SubjectNames" class="control-label"></label>
                <select asp-for="SubjectId" class="form-control" asp-items="ViewBag.SubjectID">
                    <option value="">-- Select Subject --</option>
                </select>
 


                <span asp-validation-for="SubjectId" class="text-danger" />
         
            </div>
                <div class="form-group">
                    <label asp-for="Marks" class="control-label"></label>
                    <input asp-for="Marks" class="form-control" />
                    <span asp-validation-for="Marks" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <input class="btn btn-primary" type="submit" value="Save" />
                    <a class="btn btn-danger" asp-action="Index">Back</a>
                </div>
            </form>
        </div>
    </div>
</div>
@section Scripts {

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
